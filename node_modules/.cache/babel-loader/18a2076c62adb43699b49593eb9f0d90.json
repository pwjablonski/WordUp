{"ast":null,"code":"var _jsxFileName = \"/Users/peter/Desktop/code/word-up/src/components/Board.js\";\nimport React from \"react\";\nimport \"../css/App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cell from \"./Cell\";\nimport { cellSelected, keyInputted } from \"../actions\";\nimport { getCurrentPuzzleGrid, getCurrentCell, getHighlightedCells } from \"../selectors\";\nexport default function Board() {\n  const dispatch = useDispatch();\n  const grid = useSelector(getCurrentPuzzleGrid);\n  const currentCell = useSelector(getCurrentCell);\n  const highlightedCells = useSelector(getHighlightedCells);\n\n  function onCellSelected(i) {\n    dispatch(cellSelected(i));\n  }\n\n  function onInput(e) {\n    dispatch(keyInputted(e.key));\n  }\n\n  return React.createElement(\"svg\", {\n    className: \"board\",\n    viewBox: \"0 0 500 500\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMin meet\",\n    tabIndex: 1,\n    onKeyDown: onInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"cells\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, grid.map(cellData => {\n    const isSelected = currentCell === cellData.index;\n    const isHighlighted = highlightedCells.includes(cellData.index);\n    return React.createElement(Cell, {\n      cellData: cellData,\n      isSelected: isSelected,\n      isHighlighted: isHighlighted,\n      key: cellData.index,\n      onCellSelected: onCellSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  })));\n}","map":{"version":3,"sources":["/Users/peter/Desktop/code/word-up/src/components/Board.js"],"names":["React","useSelector","useDispatch","Cell","cellSelected","keyInputted","getCurrentPuzzleGrid","getCurrentCell","getHighlightedCells","Board","dispatch","grid","currentCell","highlightedCells","onCellSelected","i","onInput","e","key","map","cellData","isSelected","index","isHighlighted","includes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,YAA1C;AAEA,SACEC,oBADF,EACwBC,cADxB,EACwCC,mBADxC,QAEO,cAFP;AAIA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,IAAI,GAAGV,WAAW,CAACK,oBAAD,CAAxB;AACA,QAAMM,WAAW,GAAGX,WAAW,CAACM,cAAD,CAA/B;AACA,QAAMM,gBAAgB,GAAGZ,WAAW,CAACO,mBAAD,CAApC;;AAEA,WAASM,cAAT,CAAwBC,CAAxB,EAA2B;AACzBL,IAAAA,QAAQ,CAACN,YAAY,CAACW,CAAD,CAAb,CAAR;AACD;;AAED,WAASC,OAAT,CAAiBC,CAAjB,EAAoB;AAClBP,IAAAA,QAAQ,CAACL,WAAW,CAACY,CAAC,CAACC,GAAH,CAAZ,CAAR;AACD;;AAED,SACE;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,OAAO,EAAC,aAFV;AAGE,IAAA,KAAK,EAAC,4BAHR;AAIE,IAAA,mBAAmB,EAAC,eAJtB;AAKE,IAAA,QAAQ,EAAE,CALZ;AAME,IAAA,SAAS,EAAEF,OANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,IAAI,CAACQ,GAAL,CAAUC,QAAD,IAAc;AACtB,UAAMC,UAAU,GAAGT,WAAW,KAAKQ,QAAQ,CAACE,KAA5C;AACA,UAAMC,aAAa,GAAEV,gBAAgB,CAACW,QAAjB,CAA0BJ,QAAQ,CAACE,KAAnC,CAArB;AAEA,WACE,oBAAC,IAAD;AACE,MAAA,QAAQ,EAAEF,QADZ;AAEE,MAAA,UAAU,EAAEC,UAFd;AAGE,MAAA,aAAa,EAAEE,aAHjB;AAIE,MAAA,GAAG,EAAEH,QAAQ,CAACE,KAJhB;AAKE,MAAA,cAAc,EAAER,cALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAbA,CADH,CARF,CADF;AA2BD","sourcesContent":["import React from \"react\";\nimport \"../css/App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cell from \"./Cell\";\nimport { cellSelected, keyInputted } from \"../actions\";\n\nimport {\n  getCurrentPuzzleGrid, getCurrentCell, getHighlightedCells\n} from \"../selectors\";\n\nexport default function Board() {\n  const dispatch = useDispatch();\n  const grid = useSelector(getCurrentPuzzleGrid);\n  const currentCell = useSelector(getCurrentCell);\n  const highlightedCells = useSelector(getHighlightedCells);\n\n  function onCellSelected(i) {\n    dispatch(cellSelected(i));\n  }\n\n  function onInput(e) {\n    dispatch(keyInputted(e.key));\n  }\n\n  return (\n    <svg\n      className=\"board\"\n      viewBox=\"0 0 500 500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMidYMin meet\"\n      tabIndex={1}\n      onKeyDown={onInput}\n    >\n      <g className=\"cells\">\n        {grid.map((cellData) => {\n          const isSelected = currentCell === cellData.index;\n          const isHighlighted= highlightedCells.includes(cellData.index);\n \n          return (\n            <Cell\n              cellData={cellData}\n              isSelected={isSelected}\n              isHighlighted={isHighlighted}\n              key={cellData.index}\n              onCellSelected={onCellSelected}\n            />\n          );\n        })}\n      </g>\n    </svg>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}