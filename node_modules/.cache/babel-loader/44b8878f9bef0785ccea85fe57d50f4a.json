{"ast":null,"code":"import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport isPromise from 'is-promise';\nimport { Subject, from, of, throwError, isObservable } from 'rxjs';\nimport { defaultIfEmpty, tap, filter, map, mergeAll, takeUntil } from 'rxjs/operators';\nimport { identityFn, isInterceptAction, unwrapInterceptAction } from './utils';\nvar UNHANDLED_LOGIC_ERROR = 'UNHANDLED_LOGIC_ERROR'; // returns { dispatch, dispatch$, done };\n\nexport default function createDispatch(_ref) {\n  var action = _ref.action,\n      cancel$ = _ref.cancel$,\n      cancelled$ = _ref.cancelled$,\n      logic = _ref.logic,\n      monitor$ = _ref.monitor$,\n      store = _ref.store;\n  var name = logic.name,\n      _logic$processOptions = logic.processOptions,\n      dispatchMultiple = _logic$processOptions.dispatchMultiple,\n      successType = _logic$processOptions.successType,\n      failType = _logic$processOptions.failType;\n  var dispatchOps = [mergeAll(), cancel$ ? takeUntil(cancel$) : null, // only takeUntil if cancel or latest\n  tap(mapToActionAndDispatch, // next\n  mapErrorToActionAndDispatch // error\n  )].filter(identityFn);\n  var dispatch$ = new Subject();\n  dispatch$.pipe.apply(dispatch$, _toConsumableArray(dispatchOps)).subscribe({\n    error: function error()\n    /* err */\n    {\n      monitor$.next({\n        action: action,\n        name: name,\n        op: 'end'\n      }); // signalling complete here since error was dispatched\n      // accordingly, otherwise if we were to signal an error here\n      // then cancelled$ subscriptions would have to specifically\n      // handle error in subscribe otherwise it will throw. So\n      // it doesn't seem that it is worth it.\n\n      cancelled$.complete();\n      cancelled$.unsubscribe();\n    },\n    complete: function complete() {\n      monitor$.next({\n        action: action,\n        name: name,\n        op: 'end'\n      });\n      cancelled$.complete();\n      cancelled$.unsubscribe();\n    }\n  });\n\n  function storeDispatch(act) {\n    monitor$.next({\n      action: action,\n      dispAction: act,\n      op: 'dispatch'\n    });\n    return store.dispatch(act);\n  }\n\n  function mapToActionAndDispatch(actionOrValue) {\n    var act = isInterceptAction(actionOrValue) ? unwrapInterceptAction(actionOrValue) : successType ? mapToAction(successType, actionOrValue, false) : actionOrValue;\n\n    if (act) {\n      storeDispatch(act);\n    }\n  }\n  /* eslint-disable consistent-return */\n\n\n  function mapErrorToActionAndDispatch(actionOrValue) {\n    // action dispatched from intercept needs to be unwrapped and sent as is\n\n    /* istanbul ignore if  */\n    if (isInterceptAction(actionOrValue)) {\n      var interceptAction = unwrapInterceptAction(actionOrValue);\n      return storeDispatch(interceptAction);\n    }\n\n    if (failType) {\n      // we have a failType, if truthy result we will use it\n      var act = mapToAction(failType, actionOrValue, true);\n\n      if (act) {\n        return storeDispatch(act);\n      }\n\n      return; // falsey result from failType, no dispatch\n    } // no failType so must wrap values with no type\n\n\n    if (actionOrValue instanceof Error) {\n      var _act = actionOrValue.type ? actionOrValue : // has type\n      {\n        type: UNHANDLED_LOGIC_ERROR,\n        payload: actionOrValue,\n        error: true\n      };\n\n      return storeDispatch(_act);\n    } // dispatch objects or functions as is\n\n\n    var typeOfValue = _typeof(actionOrValue);\n\n    if (actionOrValue && ( // not null and is object | fn\n    typeOfValue === 'object' || typeOfValue === 'function')) {\n      return storeDispatch(actionOrValue);\n    } // wasn't an error, obj, or fn, so we will wrap in unhandled\n\n\n    storeDispatch({\n      type: UNHANDLED_LOGIC_ERROR,\n      payload: actionOrValue,\n      error: true\n    });\n  }\n  /* eslint-enable consistent-return */\n\n\n  function mapToAction(type, payload, err) {\n    if (typeof type === 'function') {\n      // action creator fn\n      return type(payload);\n    }\n\n    var act = {\n      type: type,\n      payload: payload\n    };\n\n    if (err) {\n      act.error = true;\n    }\n\n    return act;\n  } // allowMore is now deprecated in favor of variable process arity\n  // which sets processOptions.dispatchMultiple = true then\n  // expects done() cb to be called to end\n  // Might still be needed for internal use so keeping it for now\n\n\n  var DispatchDefaults = {\n    allowMore: false\n  };\n\n  function dispatch(act) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _applyDispatchDefault = applyDispatchDefaults(options),\n        allowMore = _applyDispatchDefault.allowMore;\n\n    if (typeof act !== 'undefined') {\n      // ignore empty action\n      dispatch$.next( // create obs for mergeAll\n      // eslint-disable-next-line no-nested-ternary\n      isObservable(act) ? act : isPromise(act) ? from(act) : act instanceof Error ? throwError(act) : of(act));\n    }\n\n    if (!(dispatchMultiple || allowMore)) {\n      dispatch$.complete();\n    }\n\n    return act;\n  }\n\n  function applyDispatchDefaults(options) {\n    return _objectSpread({}, DispatchDefaults, options);\n  }\n\n  function done() {\n    dispatch$.complete();\n  }\n\n  return {\n    dispatch: dispatch,\n    dispatch$: dispatch$,\n    done: done\n  };\n}","map":null,"metadata":{},"sourceType":"module"}