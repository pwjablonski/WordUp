{"ast":null,"code":"export default function createEmptyPuzzle(puzzleKey, cols, rows) {\n  let puzzle = {};\n  puzzle.puzzleKey = puzzleKey;\n  puzzle.title = \"Untitled\";\n  puzzle.author = \"No Author\";\n  puzzle.size = {\n    cols: 15,\n    rows: 15\n  };\n  puzzle.grid = [];\n  puzzle.clues = {\n    across: [],\n    down: []\n  };\n  let clueCount = 1;\n\n  for (let i = 0; i < cols * rows; i += 1) {\n    if (i < 15 && i % 15 === 0) {\n      puzzle.grid.push({\n        index: i,\n        fill: '',\n        clueNum: clueCount\n      });\n      puzzle.clues.down.push({\n        clueNum: clueCount,\n        text: \"(BLANK)\"\n      });\n      puzzle.clues.across.push({\n        clueNum: clueCount,\n        text: \"(BLANK)\"\n      });\n      clueCount += 1;\n    } else if (i < 15) {\n      puzzle.grid.push({\n        index: i,\n        fill: '',\n        clueNum: clueCount\n      });\n      puzzle.clues.down.push({\n        clueNum: clueCount,\n        text: \"(BLANK)\"\n      });\n      clueCount += 1;\n    } else if (i % 15 === 0) {\n      puzzle.grid.push({\n        index: i,\n        fill: '',\n        clueNum: clueCount\n      });\n      puzzle.clues.across.push({\n        clueNum: clueCount,\n        text: \"(BLANK)\"\n      });\n      clueCount += 1;\n    } else {\n      puzzle.grid.push({\n        index: i,\n        fill: '',\n        clueNum: null\n      });\n    }\n  }\n\n  return puzzle;\n} // {\n//     title: null,\n//     author: null,\n//     clues: {\n//       across: [],\n//       down: [],\n//     },\n//     grid: [],\n//     size: {\n//       cols: 15,\n//       rows: 15\n//     },\n//   }","map":{"version":3,"sources":["/Users/peter/Desktop/code/word-up/src/util/createEmptyPuzzle.js"],"names":["createEmptyPuzzle","puzzleKey","cols","rows","puzzle","title","author","size","grid","clues","across","down","clueCount","i","push","index","fill","clueNum","text"],"mappings":"AAAA,eAAe,SAASA,iBAAT,CAA2BC,SAA3B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkD;AAC7D,MAAIC,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,CAACH,SAAP,GAAmBA,SAAnB;AACAG,EAAAA,MAAM,CAACC,KAAP,GAAe,UAAf;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,WAAhB;AACAF,EAAAA,MAAM,CAACG,IAAP,GAAc;AACZL,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,IAAI,EAAE;AAFM,GAAd;AAIAC,EAAAA,MAAM,CAACI,IAAP,GAAc,EAAd;AACAJ,EAAAA,MAAM,CAACK,KAAP,GAAe;AACXC,IAAAA,MAAM,EAAE,EADG;AAEXC,IAAAA,IAAI,EAAE;AAFK,GAAf;AAIA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,IAAI,GAAGC,IAA1B,EAAgCU,CAAC,IAAI,CAArC,EAAwC;AACpC,QAAIA,CAAC,GAAG,EAAJ,IAAUA,CAAC,GAAG,EAAJ,KAAW,CAAzB,EAA4B;AACxBT,MAAAA,MAAM,CAACI,IAAP,CAAYM,IAAZ,CAAiB;AAACC,QAAAA,KAAK,EAAEF,CAAR;AAAWG,QAAAA,IAAI,EAAE,EAAjB;AAAqBC,QAAAA,OAAO,EAAEL;AAA9B,OAAjB;AACAR,MAAAA,MAAM,CAACK,KAAP,CAAaE,IAAb,CAAkBG,IAAlB,CAAuB;AAACG,QAAAA,OAAO,EAAEL,SAAV;AAAqBM,QAAAA,IAAI,EAAE;AAA3B,OAAvB;AACAd,MAAAA,MAAM,CAACK,KAAP,CAAaC,MAAb,CAAoBI,IAApB,CAAyB;AAACG,QAAAA,OAAO,EAAEL,SAAV;AAAqBM,QAAAA,IAAI,EAAE;AAA3B,OAAzB;AACAN,MAAAA,SAAS,IAAI,CAAb;AACH,KALD,MAKO,IAAGC,CAAC,GAAG,EAAP,EAAW;AACdT,MAAAA,MAAM,CAACI,IAAP,CAAYM,IAAZ,CAAiB;AAACC,QAAAA,KAAK,EAAEF,CAAR;AAAWG,QAAAA,IAAI,EAAE,EAAjB;AAAqBC,QAAAA,OAAO,EAAEL;AAA9B,OAAjB;AACAR,MAAAA,MAAM,CAACK,KAAP,CAAaE,IAAb,CAAkBG,IAAlB,CAAuB;AAACG,QAAAA,OAAO,EAAEL,SAAV;AAAqBM,QAAAA,IAAI,EAAE;AAA3B,OAAvB;AACAN,MAAAA,SAAS,IAAI,CAAb;AACH,KAJM,MAIA,IAAIC,CAAC,GAAG,EAAJ,KAAW,CAAf,EAAkB;AACrBT,MAAAA,MAAM,CAACI,IAAP,CAAYM,IAAZ,CAAiB;AAACC,QAAAA,KAAK,EAAEF,CAAR;AAAWG,QAAAA,IAAI,EAAE,EAAjB;AAAqBC,QAAAA,OAAO,EAAEL;AAA9B,OAAjB;AACAR,MAAAA,MAAM,CAACK,KAAP,CAAaC,MAAb,CAAoBI,IAApB,CAAyB;AAACG,QAAAA,OAAO,EAAEL,SAAV;AAAqBM,QAAAA,IAAI,EAAE;AAA3B,OAAzB;AACAN,MAAAA,SAAS,IAAI,CAAb;AACH,KAJM,MAID;AACFR,MAAAA,MAAM,CAACI,IAAP,CAAYM,IAAZ,CAAiB;AAACC,QAAAA,KAAK,EAAEF,CAAR;AAAWG,QAAAA,IAAI,EAAE,EAAjB;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAjB;AACH;AACJ;;AAED,SAAOb,MAAP;AACH,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export default function createEmptyPuzzle(puzzleKey, cols, rows) {\n    let puzzle = {};\n    puzzle.puzzleKey = puzzleKey\n    puzzle.title = \"Untitled\"\n    puzzle.author = \"No Author\"\n    puzzle.size = {\n      cols: 15,\n      rows: 15\n    }\n    puzzle.grid = []\n    puzzle.clues = {\n        across: [],\n        down: [],\n    }\n    let clueCount = 1;\n    for(let i = 0; i < cols * rows; i += 1) {\n        if (i < 15 && i % 15 === 0) {\n            puzzle.grid.push({index: i, fill: '', clueNum: clueCount})\n            puzzle.clues.down.push({clueNum: clueCount, text: \"(BLANK)\"})\n            puzzle.clues.across.push({clueNum: clueCount, text: \"(BLANK)\"})\n            clueCount += 1;\n        } else if(i < 15) {\n            puzzle.grid.push({index: i, fill: '', clueNum: clueCount})\n            puzzle.clues.down.push({clueNum: clueCount, text: \"(BLANK)\"})\n            clueCount += 1;\n        } else if (i % 15 === 0) {\n            puzzle.grid.push({index: i, fill: '', clueNum: clueCount})\n            puzzle.clues.across.push({clueNum: clueCount, text: \"(BLANK)\"})\n            clueCount += 1;\n        }else {\n            puzzle.grid.push({index: i, fill: '', clueNum: null})\n        }\n    }\n\n    return puzzle\n}\n\n\n// {\n//     title: null,\n//     author: null,\n//     clues: {\n//       across: [],\n//       down: [],\n//     },\n//     grid: [],\n//     size: {\n//       cols: 15,\n//       rows: 15\n//     },\n//   }"]},"metadata":{},"sourceType":"module"}