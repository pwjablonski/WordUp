{"ast":null,"code":"import \"core-js/modules/es6.function.name\";\nimport { Subject, timer } from 'rxjs';\nimport { defaultIfEmpty, tap, take, takeUntil } from 'rxjs/operators';\nvar NODE_ENV = typeof window === 'undefined' && process && process.env && process.env.NODE_ENV ? process.env.NODE_ENV : ''; // returns { cancelled$, setInterceptComplete }\n\nexport default function createCancelled$(_ref) {\n  var action = _ref.action,\n      cancel$ = _ref.cancel$,\n      monitor$ = _ref.monitor$,\n      logic = _ref.logic;\n  var name = logic.name; // once action reaches bottom, filtered, nextDisp, or cancelled\n\n  var interceptComplete = false;\n\n  function setInterceptComplete() {\n    interceptComplete = true;\n  }\n\n  var cancelled$ = new Subject().pipe(take(1));\n\n  if (cancel$) {\n    cancel$.subscribe(cancelled$); // connect cancelled$ to cancel$\n\n    cancelled$.subscribe(function () {\n      if (!interceptComplete) {\n        monitor$.next({\n          action: action,\n          name: name,\n          op: 'cancelled'\n        });\n      } else {\n        // marking these different so not counted twice\n        monitor$.next({\n          action: action,\n          name: name,\n          op: 'dispCancelled'\n        });\n      }\n    });\n  }\n\n  createWarnTimeout({\n    logic: logic,\n    cancelled$: cancelled$\n  });\n  return {\n    cancelled$: cancelled$,\n    setInterceptComplete: setInterceptComplete\n  };\n}\n\nfunction createWarnTimeout(_ref2) {\n  var logic = _ref2.logic,\n      cancelled$ = _ref2.cancelled$;\n  var name = logic.name,\n      warnTimeout = logic.warnTimeout; // In non-production mode only we will setup a warning timeout that\n  // will console.error if logic has not completed by the time it fires\n  // warnTimeout can be set to 0 to disable\n\n  if (NODE_ENV !== 'production' && warnTimeout) {\n    timer(warnTimeout).pipe( // take until cancelled, errored, or completed\n    takeUntil(cancelled$.pipe(defaultIfEmpty(true))), tap(function () {\n      // eslint-disable-next-line no-console\n      console.error(\"warning: logic (\".concat(name, \") is still running after \").concat(warnTimeout / 1000, \"s, forget to call done()? For non-ending logic, set warnTimeout: 0\"));\n    })).subscribe();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}