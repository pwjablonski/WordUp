{"ast":null,"code":"import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { stringifyType } from './utils';\nvar allowedOptions = ['name', 'type', 'cancelType', 'latest', 'debounce', 'throttle', 'validate', 'transform', 'process', 'processOptions', 'warnTimeout'];\nvar allowedProcessOptions = ['dispatchReturn', 'dispatchMultiple', 'successType', 'failType'];\nvar NODE_ENV = typeof window === 'undefined' && process && process.env && process.env.NODE_ENV ? process.env.NODE_ENV : '';\nvar defaultOptions = {\n  warnTimeout: 60000,\n  latest: false,\n  debounce: 0,\n  throttle: 0\n};\nvar globallyConfigurableOptions = ['warnTimeout'];\n/**\n   Configure the default `createLogic` options. Note that changing these values\n   will not affect `Logic` instances that have already been instantiated.\n\n   @param {object}  options object defining default values to be used when creating `Logic`\n     instances. The following options may be set globally:\n        - warnTimeout\n\n     See the `createLogic` API documentation for a description of these options.\n\n   @returns {undefined}\n\n   @example\n\n   ```\n   import { configureLogic, createLogic } from 'redux-logic';\n\n   configureLogic({ warnTimeout: 10000 })\n\n   // These will both timeout after 10 seconds instead of the library default of\n   // 1 minute.\n   const logicOne = createLogic({\n      type: 'ACTION_ONE',\n   })\n   const logicTwo = createLogic({\n      type: 'ACTION_TWO',\n   })\n   ```\n */\n\nexport var configureLogic = function configureLogic() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var invalidOptions = getInvalidOptions(options, globallyConfigurableOptions);\n\n  if (invalidOptions.length) {\n    throw new Error(\"\".concat(invalidOptions, \" are not globally configurable options.\"));\n  }\n\n  Object.keys(options).forEach(function (option) {\n    defaultOptions[option] = options[option];\n  });\n};\n/**\n   Validate and augment logic object to be used in logicMiddleware.\n   The returned object has the same structure as the supplied\n   logicOptions argument but it will have been validated and defaults\n   will be applied\n\n   @param {object} logicOptions object defining logic operation\n   @param {string} logicOptions.name optional string name, defaults\n     to generated name from type and idx\n   @param {string | regex | function | array} logicOptions.type action\n     type(s) that this logic is used for. A string '*' indicates that\n     it applies to all types, otherwise strings are used for exact match.\n     A regex can also be used to match. If a function is supplied like\n     a redux-actions action function, then it will use call its toString()\n     method to get the associated action type. An array of any of these\n     can be supplied to extend match to more types.\n   @param {string | regex | function | array} logicOptions.cancelType\n     action type(s) that will cause a cancellation. String, regex, fn,\n     array are used similar to how the logicOptions.type works.\n     Cancellation will automatically prevent dispatches from being used\n     regardless of when the original logic finishes. Additionally a\n     cancellation$ observable is available to logic to detect\n     cancellation and perform any manual cleanup.\n   @param {boolean} logicOptions.latest enables takeLatest which cancels\n     previous when a newer one comes in, default false\n   @param {number} logicOptions.debounce milliseconds to perform\n     debouncing, cannot be used with latest, default 0 (disabled)\n   @param {number} logicOptions.throttle milliseconds to perform\n     throttling, cannot be used with latest, default 0 (disabled)\n   @param {function} logicOptions.validate hook that will be executed\n     before an action has been sent to other logic, middleware, and the\n     reducers. Must call one of the provided callback functions allow or\n     reject with an action to signal completion. Expected to be called\n     exactly once. Pass undefined as an object to forward nothing.\n     Calling reject prevents process hook from being run. Defaults to\n     an identity fn which allows the original action.\n   @param {function} logicOptions.transform hook that will be executed\n     before an action has been sent to other logic, middleware, and the\n     reducers. This is an alias for the validate hook. Call the\n     provided callback function `next` (or `reject`) to\n     signal completion. Expected to be called exactly once. Pass\n     undefined as an object to forward nothing. Defaults to an identity\n     transform which forwards the original action.\n   @param {function} logicOptions.process hook that will be invoked\n     after the original action (or that returned by validate/transform\n     step) has been forwarded to other logic, middleware, and reducers.\n     This hook will not be run if the validate/transform hook called\n     reject. This hook is ideal for any additional processing or async\n     fetching. The fn signature is `process(deps, ?dispatch, ?done)`\n     where dispatch and done are optional and if included in the\n     the signature will change the dispatch mode:\n     1. Neither dispatch, nor done - dispatches the returned/resolved val\n     2. Only dispatch - single dispatch mode, call dispatch exactly once (deprecated)\n     3. Both dispatch and done - multi-dispatch mode, call done when finished\n     Dispatch may be called with undefined when nothing needs to be\n     dispatched. Multiple dispatches may be made if including the done or\n     simply by dispatching an observable.\n     More details on dispatching modes are in the advanced API docs\n   @param {object} logicOptions.processOptions options influencing\n     process hook, default {}\n   @param {boolean} logicOptions.processOptions.dispatchReturn dispatch\n     the return value or resolved/next promise/observable, default is\n     false when dispatch is included in process fn signature\n   @param {boolean} logicOptions.processOptions.dispatchMultiple\n     multi-dispatch mode is enabled and continues until done is called\n     or cancelled. The default is false unless the done cb is included\n     in the process fn signature.\n   @param {string|function} logicOptions.processOptions.successType\n     action type or action creator fn, use value as payload\n   @param {string|function} logicOptions.processOptions.failType\n     action type or action creator fn, use value as payload\n   @param {number} logicOptions.warnTimeout In non-production environment\n     a console.error message will be logged if logic doesn't complete\n     before this timeout in ms fires. Set to 0 to disable. Defaults to\n     60000 (one minute)\n   @returns {object} validated logic object which can be used in\n     logicMiddleware contains the same properties as logicOptions but\n     has defaults applied.\n */\n\nexport default function createLogic() {\n  var logicOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var invalidOptions = getInvalidOptions(logicOptions, allowedOptions);\n\n  if (invalidOptions.length) {\n    throw new Error(\"unknown or misspelled option(s): \".concat(invalidOptions));\n  }\n\n  var name = logicOptions.name,\n      type = logicOptions.type,\n      cancelType = logicOptions.cancelType,\n      _logicOptions$warnTim = logicOptions.warnTimeout,\n      warnTimeout = _logicOptions$warnTim === void 0 ? defaultOptions.warnTimeout : _logicOptions$warnTim,\n      _logicOptions$latest = logicOptions.latest,\n      latest = _logicOptions$latest === void 0 ? defaultOptions.latest : _logicOptions$latest,\n      _logicOptions$debounc = logicOptions.debounce,\n      debounce = _logicOptions$debounc === void 0 ? defaultOptions.debounce : _logicOptions$debounc,\n      _logicOptions$throttl = logicOptions.throttle,\n      throttle = _logicOptions$throttl === void 0 ? defaultOptions.throttle : _logicOptions$throttl,\n      validate = logicOptions.validate,\n      transform = logicOptions.transform,\n      process = logicOptions.process,\n      _logicOptions$process = logicOptions.processOptions,\n      processOptions = _logicOptions$process === void 0 ? {} : _logicOptions$process;\n\n  if (!type) {\n    throw new Error('type is required, use \\'*\\' to match all actions');\n  }\n\n  if (type === 'undefined') {\n    throw new Error('type is a string \"undefined\", check the logicOptions type field for a stringified undefined value');\n  }\n\n  if (validate && transform) {\n    throw new Error('logic cannot define both the validate and transform hooks they are aliases');\n  }\n\n  if (typeof processOptions.warnTimeout !== 'undefined') {\n    throw new Error('warnTimeout is a top level createLogic option, not a processOptions option');\n  }\n\n  var invalidProcessOptions = getInvalidOptions(processOptions, allowedProcessOptions);\n\n  if (invalidProcessOptions.length) {\n    throw new Error(\"unknown or misspelled processOption(s): \".concat(invalidProcessOptions));\n  }\n\n  if (NODE_ENV !== 'production' && typeof processOptions.dispatchMultiple !== 'undefined' && warnTimeout !== 0) {\n    // eslint-disable-next-line no-console\n    console.error(\"warning: in logic for type(s): \".concat(stringifyType(type), \" - dispatchMultiple is always true in next version. For non-ending logic, set warnTimeout to 0\"));\n  }\n\n  var processLength = process ? process.length : 0; // use process fn signature to determine some processOption defaults\n  // for dispatchReturn and dispatchMultiple\n\n  switch (processLength) {\n    case 0: // process() - dispatchReturn\n\n    case 1:\n      // process(deps) - dispatchReturn\n      setIfUndefined(processOptions, 'dispatchReturn', true);\n      break;\n\n    case 2:\n      // process(deps, dispatch) - single dispatch (deprecated)\n      if (NODE_ENV !== 'production' && !processOptions.dispatchMultiple && warnTimeout !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(\"warning: in logic for type(s): \".concat(stringifyType(type), \" - single-dispatch mode is deprecated, call done when finished dispatching. For non-ending logic, set warnTimeout: 0\"));\n      } // nothing to do, defaults are fine\n\n\n      break;\n\n    case 3: // process(deps, dispatch, done) - multi-dispatch\n\n    default:\n      // allow for additional params to come later\n      setIfUndefined(processOptions, 'dispatchMultiple', true);\n      break;\n  }\n\n  return {\n    name: typeToStrFns(name),\n    type: typeToStrFns(type),\n    cancelType: typeToStrFns(cancelType),\n    latest: latest,\n    debounce: debounce,\n    throttle: throttle,\n    validate: validate,\n    transform: transform,\n    process: process,\n    processOptions: processOptions,\n    warnTimeout: warnTimeout\n  };\n}\n\nfunction getInvalidOptions(options, validOptions) {\n  return Object.keys(options).filter(function (k) {\n    return validOptions.indexOf(k) === -1;\n  });\n}\n/* if type is a fn call toString() to get type, redux-actions\n  if array, then check members */\n\n\nfunction typeToStrFns(type) {\n  if (Array.isArray(type)) {\n    return type.map(function (x) {\n      return typeToStrFns(x);\n    });\n  }\n\n  return typeof type === 'function' ? type.toString() : type;\n}\n\nfunction setIfUndefined(obj, propName, propValue) {\n  if (typeof obj[propName] === 'undefined') {\n    // eslint-disable-next-line no-param-reassign\n    obj[propName] = propValue;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}