{"ast":null,"code":"import getHighlightedCells from \"./getHighlightedCells\";\nimport getCurrentPuzzleGrid from \"./getCurrentPuzzleGrid\";\nimport getCurrentCell from \"./getCurrentCell\";\nexport default function getHighlightedLetters(state) {\n  const highlightedCells = getHighlightedCells(state);\n  const grid = getCurrentPuzzleGrid(state);\n  const currentCell = getCurrentCell(state);\n\n  if (grid[currentCell].fill === \".\") {\n    return null;\n  }\n\n  let word = \"\";\n\n  for (let i = 0; i < highlightedCells.length; i += 1) {\n    const letter = grid[highlightedCells[i]].fill;\n\n    if (letter === \"\") {\n      word += \"_ \";\n    } else {\n      word += letter + \" \";\n    }\n  }\n\n  return word;\n}","map":{"version":3,"sources":["/Users/peter/Desktop/code/word-up/src/selectors/getHighlightedLetters.js"],"names":["getHighlightedCells","getCurrentPuzzleGrid","getCurrentCell","getHighlightedLetters","state","highlightedCells","grid","currentCell","fill","word","i","length","letter"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AACjD,QAAMC,gBAAgB,GAAIL,mBAAmB,CAACI,KAAD,CAA7C;AACA,QAAME,IAAI,GAAIL,oBAAoB,CAACG,KAAD,CAAlC;AACA,QAAMG,WAAW,GAAGL,cAAc,CAACE,KAAD,CAAlC;;AAEA,MAAGE,IAAI,CAACC,WAAD,CAAJ,CAAkBC,IAAlB,KAA2B,GAA9B,EAAkC;AAC9B,WAAO,IAAP;AACH;;AACD,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,gBAAgB,CAACM,MAApC,EAA4CD,CAAC,IAAI,CAAjD,EAAmD;AAC/C,UAAME,MAAM,GAAIN,IAAI,CAACD,gBAAgB,CAACK,CAAD,CAAjB,CAAJ,CAA0BF,IAA1C;;AACA,QAAII,MAAM,KAAM,EAAhB,EAAmB;AACfH,MAAAA,IAAI,IAAI,IAAR;AACH,KAFD,MAEO;AACHA,MAAAA,IAAI,IAAIG,MAAM,GAAG,GAAjB;AACH;AACJ;;AACD,SAAOH,IAAP;AACH","sourcesContent":["import getHighlightedCells from \"./getHighlightedCells\"\nimport getCurrentPuzzleGrid from \"./getCurrentPuzzleGrid\"\nimport getCurrentCell from \"./getCurrentCell\";\n\nexport default function getHighlightedLetters(state) {\n    const highlightedCells =  getHighlightedCells(state)\n    const grid =  getCurrentPuzzleGrid(state)\n    const currentCell = getCurrentCell(state);\n\n    if(grid[currentCell].fill === \".\"){\n        return null\n    }\n    let word = \"\";\n    for(let i = 0; i < highlightedCells.length; i += 1){\n        const letter =  grid[highlightedCells[i]].fill;\n        if (letter ===  \"\"){\n            word += \"_ \"\n        } else {\n            word += letter + \" \"\n        }\n    }\n    return word;\n}\n  "]},"metadata":{},"sourceType":"module"}