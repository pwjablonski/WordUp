{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\n\nvar PropTypes = __importStar(require(\"prop-types\"));\n\nfunction normalizeHtml(str) {\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ');\n}\n\nfunction findLastTextNode(node) {\n  if (node.nodeType === Node.TEXT_NODE) return node;\n  var children = node.childNodes;\n\n  for (var i = children.length - 1; i >= 0; i--) {\n    var textNode = findLastTextNode(children[i]);\n    if (textNode !== null) return textNode;\n  }\n\n  return null;\n}\n\nfunction replaceCaret(el) {\n  // Place the caret at the end of the element\n  var target = findLastTextNode(el); // do not move caret if element was not focused\n\n  var isTargetFocused = document.activeElement === el;\n\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\n    var sel = window.getSelection();\n\n    if (sel !== null) {\n      var range = document.createRange();\n      range.setStart(target, target.nodeValue.length);\n      range.collapse(true);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n\n    if (el instanceof HTMLElement) el.focus();\n  }\n}\n/**\n * A simple component for an html element with editable contents.\n */\n\n\nvar ContentEditable =\n/** @class */\nfunction (_super) {\n  __extends(ContentEditable, _super);\n\n  function ContentEditable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.lastHtml = _this.props.html;\n    _this.el = typeof _this.props.innerRef === 'function' ? {\n      current: null\n    } : React.createRef();\n\n    _this.getEl = function () {\n      return (_this.props.innerRef && typeof _this.props.innerRef !== 'function' ? _this.props.innerRef : _this.el).current;\n    };\n\n    _this.emitChange = function (originalEvt) {\n      var el = _this.getEl();\n\n      if (!el) return;\n      var html = el.innerHTML;\n\n      if (_this.props.onChange && html !== _this.lastHtml) {\n        // Clone event with Object.assign to avoid\n        // \"Cannot assign to read only property 'target' of object\"\n        var evt = Object.assign({}, originalEvt, {\n          target: {\n            value: html\n          }\n        });\n\n        _this.props.onChange(evt);\n      }\n\n      _this.lastHtml = html;\n    };\n\n    return _this;\n  }\n\n  ContentEditable.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        tagName = _a.tagName,\n        html = _a.html,\n        innerRef = _a.innerRef,\n        props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\n\n    return React.createElement(tagName || 'div', __assign({}, props, {\n      ref: typeof innerRef === 'function' ? function (current) {\n        innerRef(current);\n        _this.el.current = current;\n      } : innerRef || this.el,\n      onInput: this.emitChange,\n      onBlur: this.props.onBlur || this.emitChange,\n      onKeyUp: this.props.onKeyUp || this.emitChange,\n      onKeyDown: this.props.onKeyDown || this.emitChange,\n      contentEditable: !this.props.disabled,\n      dangerouslySetInnerHTML: {\n        __html: html\n      }\n    }), this.props.children);\n  };\n\n  ContentEditable.prototype.shouldComponentUpdate = function (nextProps) {\n    var props = this.props;\n    var el = this.getEl(); // We need not rerender if the change of props simply reflects the user's edits.\n    // Rerendering in this case would make the cursor/caret jump\n    // Rerender if there is no element yet... (somehow?)\n\n    if (!el) return true; // ...or if html really changed... (programmatically, not by user edit)\n\n    if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\n      return true;\n    } // Handle additional properties\n\n\n    return props.disabled !== nextProps.disabled || props.tagName !== nextProps.tagName || props.className !== nextProps.className || props.innerRef !== nextProps.innerRef || !fast_deep_equal_1.default(props.style, nextProps.style);\n  };\n\n  ContentEditable.prototype.componentDidUpdate = function () {\n    var el = this.getEl();\n    if (!el) return; // Perhaps React (whose VDOM gets outdated because we often prevent\n    // rerendering) did not update the DOM. So we update it manually now.\n\n    if (this.props.html !== el.innerHTML) {\n      el.innerHTML = this.lastHtml = this.props.html;\n    }\n\n    replaceCaret(el);\n  };\n\n  ContentEditable.propTypes = {\n    html: PropTypes.string.isRequired,\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n    tagName: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func])\n  };\n  return ContentEditable;\n}(React.Component);\n\nexports.default = ContentEditable;","map":null,"metadata":{},"sourceType":"script"}