{"ast":null,"code":"import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport isPromise from 'is-promise';\nimport { Observable, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { identityFn, wrapActionForIntercept } from './utils';\nimport createDepObject from './createDepObject';\nimport execProcessFn from './execProcessFn';\nimport createDispatch from './createDispatch';\nimport createCancelled$ from './createCancelled$';\n\nvar debug = function debug()\n/* ...args */\n{};\n\nexport default function createLogicAction$(_ref) {\n  var _Observable$create;\n\n  var action = _ref.action,\n      logic = _ref.logic,\n      store = _ref.store,\n      deps = _ref.deps,\n      cancel$ = _ref.cancel$,\n      monitor$ = _ref.monitor$,\n      action$ = _ref.action$;\n  var getState = store.getState;\n  var name = logic.name,\n      processFn = logic.process,\n      _logic$processOptions = logic.processOptions,\n      dispatchReturn = _logic$processOptions.dispatchReturn,\n      dispatchMultiple = _logic$processOptions.dispatchMultiple,\n      successType = _logic$processOptions.successType,\n      failType = _logic$processOptions.failType;\n  var intercept = logic.validate || logic.transform; // aliases\n\n  debug('createLogicAction$', name, action);\n  monitor$.next({\n    action: action,\n    name: name,\n    op: 'begin'\n  }); // also in logicWrapper\n\n  var logicActionOps = [cancel$ ? takeUntil(cancel$) : null, // only takeUntil if cancel or latest\n  take(1)].filter(identityFn); // logicAction$ is used for the mw next(action) call\n\n  var logicAction$ = (_Observable$create = Observable.create(function (logicActionObs) {\n    // create notification subject for process which we dispose of\n    // when take(1) or when we are done dispatching\n    var _createCancelled$ = createCancelled$({\n      action: action,\n      cancel$: cancel$,\n      monitor$: monitor$,\n      logic: logic\n    }),\n        cancelled$ = _createCancelled$.cancelled$,\n        setInterceptComplete = _createCancelled$.setInterceptComplete;\n\n    var _createDispatch = createDispatch({\n      action: action,\n      cancel$: cancel$,\n      cancelled$: cancelled$,\n      logic: logic,\n      monitor$: monitor$,\n      store: store\n    }),\n        dispatch = _createDispatch.dispatch,\n        dispatch$ = _createDispatch.dispatch$,\n        done = _createDispatch.done; // passed into each execution phase hook as first argument\n\n\n    var ctx = {}; // for sharing data between hooks\n\n    var depObj = createDepObject({\n      deps: deps,\n      cancelled$: cancelled$,\n      ctx: ctx,\n      getState: getState,\n      action: action,\n      action$: action$\n    });\n\n    function shouldDispatch(act, useDispatch) {\n      if (!act) {\n        return false;\n      }\n\n      if (useDispatch === 'auto') {\n        // dispatch on diff type\n        return act.type !== action.type;\n      }\n\n      return useDispatch; // otherwise forced truthy/falsy\n    }\n\n    var AllowRejectNextDefaults = {\n      useDispatch: 'auto'\n    };\n\n    function applyAllowRejectNextDefaults(options) {\n      return _objectSpread({}, AllowRejectNextDefaults, options);\n    }\n\n    function allow(act) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AllowRejectNextDefaults;\n      handleNextOrDispatch(true, act, options);\n    }\n\n    function reject(act) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AllowRejectNextDefaults;\n      handleNextOrDispatch(false, act, options);\n    }\n\n    function handleNextOrDispatch(shouldProcess, act, options) {\n      var shouldProcessAndHasProcessFn = shouldProcess && processFn;\n\n      var _applyAllowRejectNext = applyAllowRejectNextDefaults(options),\n          useDispatch = _applyAllowRejectNext.useDispatch;\n\n      if (shouldDispatch(act, useDispatch)) {\n        monitor$.next({\n          action: action,\n          dispAction: act,\n          name: name,\n          shouldProcess: shouldProcess,\n          op: 'nextDisp'\n        });\n        setInterceptComplete();\n        dispatch(wrapActionForIntercept(act), {\n          allowMore: true\n        }); // will be completed later\n\n        logicActionObs.complete(); // dispatched action, so no next(act)\n      } else {\n        // normal next\n        if (act) {\n          monitor$.next({\n            action: action,\n            nextAction: act,\n            name: name,\n            shouldProcess: shouldProcess,\n            op: 'next'\n          });\n        } else {\n          // act is undefined, filtered\n          monitor$.next({\n            action: action,\n            name: name,\n            shouldProcess: shouldProcess,\n            op: 'filtered'\n          });\n          setInterceptComplete();\n        }\n\n        postIfDefinedOrComplete(act, logicActionObs);\n      } // unless rejected, we will process even if allow/next dispatched\n\n\n      if (shouldProcessAndHasProcessFn) {\n        // processing, was an accept\n        // if action provided is empty, give process orig\n        depObj.action = act || action;\n        execProcessFn({\n          depObj: depObj,\n          dispatch: dispatch,\n          done: done,\n          processFn: processFn,\n          dispatchReturn: dispatchReturn,\n          dispatch$: dispatch$,\n          name: name\n        });\n      } else {\n        // not processing, must have been a reject\n        dispatch$.complete();\n      }\n    }\n    /* post if defined, then complete */\n\n\n    function postIfDefinedOrComplete(act, act$) {\n      if (act) {\n        act$.next(act); // triggers call to middleware's next()\n      }\n\n      setInterceptComplete();\n      act$.complete();\n    } // start use of the action\n\n\n    function start() {\n      // normal intercept and processing\n      return intercept(depObj, allow, reject);\n    }\n\n    start();\n  })).pipe.apply(_Observable$create, _toConsumableArray(logicActionOps)); // take, takeUntil\n\n\n  return logicAction$;\n}","map":null,"metadata":{},"sourceType":"module"}