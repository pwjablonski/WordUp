{"ast":null,"code":"export default function findClueAndHilightecCells(currentDirection, currentCell, grid) {\n  let newHighlightedCells = [];\n  let lineStart;\n  let lineEnd;\n  let incrementor;\n  let shouldReturnCells = false;\n\n  if (currentDirection === \"across\") {\n    lineStart = currentCell - currentCell % 15;\n    lineEnd = lineStart + 15;\n    incrementor = 1;\n  } else if (currentDirection === \"down\") {\n    lineStart = 0 + currentCell % 15;\n    lineEnd = lineStart + 211;\n    incrementor = 15;\n  }\n\n  let newClue;\n\n  if (grid[currentCell].fill === \".\") {\n    newClue = null;\n  } else {\n    newClue = grid[lineStart].clueNum;\n\n    for (let i = lineStart; i < lineEnd; i += incrementor) {\n      if (i === currentCell) {\n        newHighlightedCells.push(i);\n        shouldReturnCells = true;\n      } else if (grid[i].fill === \".\" && shouldReturnCells) {\n        return {\n          newClue,\n          newHighlightedCells\n        };\n      } else if (grid[i].fill === \".\" && !shouldReturnCells) {\n        newHighlightedCells = [];\n        newClue = grid[i + incrementor].clueNum;\n      } else {\n        newHighlightedCells.push(i);\n      }\n    }\n  }\n\n  return {\n    newClue,\n    newHighlightedCells\n  };\n}","map":{"version":3,"sources":["/Users/peter/Desktop/code/word-up/src/util/findClueAndHighlightedCells.js"],"names":["findClueAndHilightecCells","currentDirection","currentCell","grid","newHighlightedCells","lineStart","lineEnd","incrementor","shouldReturnCells","newClue","fill","clueNum","i","push"],"mappings":"AAAA,eAAe,SAASA,yBAAT,CACXC,gBADW,EAEXC,WAFW,EAGXC,IAHW,EAIX;AACA,MAAIC,mBAAmB,GAAG,EAA1B;AACA,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,iBAAiB,GAAG,KAAxB;;AAEA,MAAIP,gBAAgB,KAAK,QAAzB,EAAmC;AACjCI,IAAAA,SAAS,GAAGH,WAAW,GAAIA,WAAW,GAAG,EAAzC;AACAI,IAAAA,OAAO,GAAGD,SAAS,GAAG,EAAtB;AACAE,IAAAA,WAAW,GAAG,CAAd;AACD,GAJD,MAIO,IAAIN,gBAAgB,KAAK,MAAzB,EAAiC;AACtCI,IAAAA,SAAS,GAAG,IAAKH,WAAW,GAAG,EAA/B;AACAI,IAAAA,OAAO,GAAGD,SAAS,GAAG,GAAtB;AACAE,IAAAA,WAAW,GAAG,EAAd;AACD;;AAED,MAAIE,OAAJ;;AAEA,MAAGN,IAAI,CAACD,WAAD,CAAJ,CAAkBQ,IAAlB,KAA2B,GAA9B,EAAkC;AAChCD,IAAAA,OAAO,GAAG,IAAV;AACD,GAFD,MAEO;AACLA,IAAAA,OAAO,GAAGN,IAAI,CAACE,SAAD,CAAJ,CAAgBM,OAA1B;;AACA,SAAK,IAAIC,CAAC,GAAGP,SAAb,EAAwBO,CAAC,GAAGN,OAA5B,EAAqCM,CAAC,IAAIL,WAA1C,EAAuD;AACrD,UAAIK,CAAC,KAAKV,WAAV,EAAuB;AACrBE,QAAAA,mBAAmB,CAACS,IAApB,CAAyBD,CAAzB;AACAJ,QAAAA,iBAAiB,GAAG,IAApB;AACD,OAHD,MAGO,IAAIL,IAAI,CAACS,CAAD,CAAJ,CAAQF,IAAR,KAAiB,GAAjB,IAAwBF,iBAA5B,EAA+C;AACpD,eAAO;AAAEC,UAAAA,OAAF;AAAWL,UAAAA;AAAX,SAAP;AACD,OAFM,MAEA,IAAID,IAAI,CAACS,CAAD,CAAJ,CAAQF,IAAR,KAAiB,GAAjB,IAAwB,CAACF,iBAA7B,EAAgD;AACrDJ,QAAAA,mBAAmB,GAAG,EAAtB;AACAK,QAAAA,OAAO,GAAGN,IAAI,CAACS,CAAC,GAAGL,WAAL,CAAJ,CAAsBI,OAAhC;AACD,OAHM,MAGA;AACLP,QAAAA,mBAAmB,CAACS,IAApB,CAAyBD,CAAzB;AACD;AACF;AACF;;AACD,SAAO;AAAEH,IAAAA,OAAF;AAAWL,IAAAA;AAAX,GAAP;AACD","sourcesContent":["export default function findClueAndHilightecCells(\n    currentDirection,\n    currentCell,\n    grid\n  ) {\n    let newHighlightedCells = [];\n    let lineStart;\n    let lineEnd;\n    let incrementor;\n    let shouldReturnCells = false;\n  \n    if (currentDirection === \"across\") {\n      lineStart = currentCell - (currentCell % 15);\n      lineEnd = lineStart + 15;\n      incrementor = 1;\n    } else if (currentDirection === \"down\") {\n      lineStart = 0 + (currentCell % 15);\n      lineEnd = lineStart + 211;\n      incrementor = 15;\n    }\n  \n    let newClue;\n\n    if(grid[currentCell].fill === \".\"){\n      newClue = null;\n    } else {\n      newClue = grid[lineStart].clueNum;\n      for (let i = lineStart; i < lineEnd; i += incrementor) {\n        if (i === currentCell) {\n          newHighlightedCells.push(i);\n          shouldReturnCells = true;\n        } else if (grid[i].fill === \".\" && shouldReturnCells) {\n          return { newClue, newHighlightedCells };\n        } else if (grid[i].fill === \".\" && !shouldReturnCells) {\n          newHighlightedCells = [];\n          newClue = grid[i + incrementor].clueNum;\n        } else {\n          newHighlightedCells.push(i);\n        }\n      }\n    }\n    return { newClue, newHighlightedCells };\n  }\n  "]},"metadata":{},"sourceType":"module"}