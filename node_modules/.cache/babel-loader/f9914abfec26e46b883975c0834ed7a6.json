{"ast":null,"code":"export default function updateClueNums(puzzle) {\n  const grid = puzzle.grid,\n        clues = puzzle.clues;\n  let newGrid = [];\n  let newClues = {\n    across: [],\n    down: []\n  };\n  let label = 1;\n\n  for (let i = 0; i < grid.length; i += 1) {\n    if (grid[i].fill === \".\") {\n      newGrid.push({\n        index: i,\n        fill: grid[i].fill,\n        clueNum: null\n      });\n    } else {\n      if ((i % 15 === 0 || grid[i - 1].fill === \".\") && (i < 15 || grid[i - 15].fill === \".\")) {\n        newGrid.push({\n          index: i,\n          fill: grid[i].fill,\n          clueNum: label\n        });\n        newClues.across.push({\n          clueNum: label,\n          text: \"(BLANK)\"\n        });\n        newClues.down.push({\n          clueNum: label,\n          text: \"(BLANK)\"\n        });\n        label += 1;\n      } else if (i % 15 === 0 || grid[i - 1].fill === \".\") {\n        newGrid.push({\n          index: i,\n          fill: grid[i].fill,\n          clueNum: label\n        });\n        newClues.across.push({\n          clueNum: label,\n          text: \"(BLANK)\"\n        });\n        label += 1;\n      } else if (i < 15 || grid[i - 15].fill === \".\") {\n        newGrid.push({\n          index: i,\n          fill: grid[i].fill,\n          clueNum: label\n        });\n        newClues.down.push({\n          clueNum: label,\n          text: \"(BLANK)\"\n        });\n        label += 1;\n      } else {\n        newGrid.push({\n          index: i,\n          fill: grid[i].fill,\n          clueNum: null\n        });\n      }\n    }\n  }\n\n  for (let i = 0; i < newClues.across.length; i += 1) {\n    const clue = clues.across.find(function (oldClue) {\n      return newClues.across[i].clueNum === oldClue.clueNum;\n    });\n\n    if (clue) {\n      newClues.across[i].text = clue.text;\n    }\n  }\n\n  for (let i = 0; i < newClues.down.length; i += 1) {\n    const clue = clues.down.find(function (oldClue) {\n      return newClues.down[i].clueNum === oldClue.clueNum;\n    });\n\n    if (clue) {\n      newClues.down[i].text = clue.text;\n    }\n  }\n\n  return {\n    newGrid,\n    newClues\n  };\n}","map":{"version":3,"sources":["/Users/peter/Desktop/code/word-up/src/util/updateClues.js"],"names":["updateClueNums","puzzle","grid","clues","newGrid","newClues","across","down","label","i","length","fill","push","index","clueNum","text","clue","find","oldClue"],"mappings":"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","sourcesContent":["export default function updateClueNums(puzzle) {\n    const {grid, clues} = puzzle;\n    let newGrid = [];\n    let newClues = {across:[], down:[]};\n    let label = 1;\n    for (let i = 0; i < grid.length; i += 1) {\n      if (grid[i].fill === \".\") {\n        newGrid.push({index: i, fill: grid[i].fill, clueNum: null});\n      } else {\n        if((i % 15 === 0 || grid[i - 1].fill === \".\") && \n          (i < 15 || grid[i - 15].fill === \".\")\n        ){\n          newGrid.push({index: i, fill: grid[i].fill, clueNum: label});\n          newClues.across.push({clueNum:label, text: \"(BLANK)\"})\n          newClues.down.push({clueNum:label, text: \"(BLANK)\"})\n          label += 1;\n        }\n        else if (i % 15 === 0 || grid[i - 1].fill === \".\") {\n          newGrid.push({index: i, fill: grid[i].fill, clueNum: label});\n          newClues.across.push({clueNum:label, text: \"(BLANK)\"})\n          label += 1;\n        } else if (i < 15 || grid[i - 15].fill === \".\") {\n          newGrid.push({index: i, fill: grid[i].fill, clueNum: label});\n          newClues.down.push({clueNum:label, text: \"(BLANK)\"})\n          label += 1;\n        } else {\n          newGrid.push({index: i, fill: grid[i].fill, clueNum: null});\n        }\n      }\n    }\n\n    for(let i = 0; i < newClues.across.length; i +=1) {\n      const clue = clues.across.find(function(oldClue){\n        return newClues.across[i].clueNum === oldClue.clueNum;\n      });\n      if(clue){\n        newClues.across[i].text = clue.text;\n      }\n    }\n    \n    for(let i = 0; i < newClues.down.length; i +=1) {\n      const clue = clues.down.find(function(oldClue){\n        return newClues.down[i].clueNum === oldClue.clueNum;\n      });\n      if(clue){\n        newClues.down[i].text = clue.text;\n      }\n    }\n\n    return {newGrid, newClues};\n}\n"]},"metadata":{},"sourceType":"module"}